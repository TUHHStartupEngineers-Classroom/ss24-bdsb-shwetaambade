[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "# Load required packages\nlibrary(data.table)\n\n#&gt; Warning: package 'data.table' was built under R version 4.3.3\n\n# Set working directory if needed\n# setwd(\"C:/Users/Shweta/Documents/GitHub/ss24-bdsb-shwetaambade/datascience/Patent_data_reduced/Patent_data_reduced/\")\n\n\n# Load data\nassignee &lt;- fread(\"C:/Users/Shweta/Documents/GitHub/ss24-bdsb-shwetaambade/datascience/Patent_data_reduced/Patent_data_reduced/assignee.tsv\")\npatent_assignee &lt;- fread(\"C:/Users/Shweta/Documents/GitHub/ss24-bdsb-shwetaambade/datascience/Patent_data_reduced/Patent_data_reduced/patent_assignee.tsv\")\npatent &lt;- fread(\"C:/Users/Shweta/Documents/GitHub/ss24-bdsb-shwetaambade/datascience/Patent_data_reduced/Patent_data_reduced/patent.tsv\")\nuspc &lt;- fread(\"C:/Users/Shweta/Documents/GitHub/ss24-bdsb-shwetaambade/datascience/Patent_data_reduced/Patent_data_reduced/uspc.tsv\")\n\n\n# Check column names\ncolnames(assignee)\n\n#&gt; [1] \"id\"           \"type\"         \"organization\"\n\ncolnames(patent_assignee)\n\n#&gt; [1] \"patent_id\"   \"assignee_id\"\n\ncolnames(patent)\n\n#&gt; [1] \"id\"         \"date\"       \"num_claims\"\n\ncolnames(uspc)\n\n#&gt; [1] \"patent_id\"    \"mainclass_id\" \"sequence\"\n\n# Question 1: Patent Dominance- correct\n# Join assignee and patent_assignee tables, filter for US companies, then count patents by company\ndominance &lt;- assignee[patent_assignee, on = c(\"id\" = \"assignee_id\")][type %in% c(2, 4, 6, 8, 9), .N, by = organization][order(-N)]\n\n# Display top 10 US companies with the most assigned/granted patents\nhead(dominance, 10)\n\n\n\n  \n\n\n# Question 2: Recent Patent Activity-correct\n# Filter patents granted in August 2014, then count patents by company\nrecent_activity &lt;- assignee[patent_assignee[patent, on = c(\"patent_id\" = \"id\")][date &gt;= \"2014-08-01\" & date &lt;= \"2014-08-31\"], on = c(\"id\" = \"assignee_id\")][type %in% c(2, 4, 6, 8, 9), .N, by = organization][order(-N)]\n\n# Display top 10 US companies with the most new granted patents for August 2014\nhead(recent_activity, 10)\n\n\n\n  \n\n\n# Question 3: Innovation in Tech-correct\n# Join assignee, patent_assignee, and uspc tables, then count patents by tech sector\ninnovation &lt;- assignee[patent_assignee, on = c(\"id\" = \"assignee_id\")][uspc, on = c(\"patent_id\" = \"patent_id\")][, .N, by = .(organization, mainclass_id)][order(-N)]\n\n# Display the top 10 most innovative tech sectors\ntop_sectors &lt;- head(innovation, 10)\nprint(top_sectors)\n\n#&gt;                                         organization mainclass_id     N\n#&gt;                                               &lt;char&gt;       &lt;char&gt; &lt;int&gt;\n#&gt;  1:                          Monsanto Technology LLC          800  2535\n#&gt;  2:      International Business Machines Corporation          257  2397\n#&gt;  3: Taiwan Semiconductor Manufacturing Company, Ltd.          257  2383\n#&gt;  4:                            QUALCOMM Incorporated          455  2244\n#&gt;  5:              Pioneer Hi-Bred International, Inc.          800  2231\n#&gt;  6:                    Samsung Electronics Co., Ltd.          257  2035\n#&gt;  7:                            QUALCOMM Incorporated          370  1788\n#&gt;  8:      International Business Machines Corporation          438  1742\n#&gt;  9:                         Kabushiki Kaisha Toshiba          257  1647\n#&gt; 10:        SEMICONDUCTOR ENERGY LABORATORY CO., LTD.          257  1619\n\n# Count the number of patents per main class\nmain_class_counts &lt;- innovation[, .N, by = mainclass_id]\n\n# Sort the main classes by patent count\nsorted_main_classes &lt;- main_class_counts[order(-N)]\n\n# Display the top 5 USPTO tech main classes\ntop_main_classes &lt;- head(sorted_main_classes, 5)\nprint(top_main_classes)\n\n#&gt;    mainclass_id     N\n#&gt;          &lt;char&gt; &lt;int&gt;\n#&gt; 1:          435  2474\n#&gt; 2:          514  2431\n#&gt; 3:          424  2295\n#&gt; 4:          705  1775\n#&gt; 5:          709  1759"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "# Load necessary libraries\nlibrary(dplyr)\n\n#&gt; Warning: package 'dplyr' was built under R version 4.3.3\n\n\n#&gt; \n#&gt; Attaching package: 'dplyr'\n\n\n#&gt; The following objects are masked from 'package:stats':\n#&gt; \n#&gt;     filter, lag\n\n\n#&gt; The following objects are masked from 'package:base':\n#&gt; \n#&gt;     intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\n\n#&gt; Warning: package 'ggplot2' was built under R version 4.3.3\n\nlibrary(tidyr)\n\n#&gt; Warning: package 'tidyr' was built under R version 4.3.3\n\nlibrary(stringr)\nlibrary(readxl)\n\n# Read data from Excel files\nbikes &lt;- read_excel(\"C:/Users/Shweta/Documents/GitHub/ss24-bdsb-shwetaambade/datascience/ds_data/ds_data/01_bike_sales/01_raw_data/bikes.xlsx\")\nbikeshops &lt;- read_excel(\"C:/Users/Shweta/Documents/GitHub/ss24-bdsb-shwetaambade/datascience/ds_data/ds_data/01_bike_sales/01_raw_data/bikeshops.xlsx\")\norderlines &lt;- read_excel(\"C:/Users/Shweta/Documents/GitHub/ss24-bdsb-shwetaambade/datascience/ds_data/ds_data/01_bike_sales/01_raw_data/orderlines.xlsx\")\n\n#&gt; New names:\n#&gt; • `` -&gt; `...1`\n\n# Merge dataframes \nbike_orderlines_joined &lt;- orderlines %&gt;%\n  left_join(bikes, by = c(\"product.id\" = \"bike.id\")) %&gt;%\n  left_join(bikeshops, by = c(\"customer.id\" = \"bikeshop.id\"))\n\n# Extract state abbreviation from location\nbike_orderlines_wrangled &lt;- bike_orderlines_joined %&gt;%\n  separate(location, into = c(\"city\", \"state\"), sep = \",\") %&gt;%\n  mutate(state = str_trim(state))\n\n# Calculating total price\nbike_orderlines_wrangled &lt;- bike_orderlines_wrangled %&gt;%\n  mutate(total_price = price * quantity)\n\n# Group by state and summarize sales\nsales_by_state_tbl &lt;- bike_orderlines_wrangled %&gt;%\n  group_by(state, city) %&gt;%\n  summarise(total_sales = sum(total_price)) %&gt;%\n  arrange(desc(total_sales)) # Arrange states by total sales, descending order\n\n#&gt; `summarise()` has grouped output by 'state'. You can override using the\n#&gt; `.groups` argument.\n\n# Visualize sales by state\nsales_by_state_tbl %&gt;%\n  ggplot(aes(x = reorder(state, -total_sales), y = total_sales)) +\n  geom_bar(stat = \"identity\", fill = \"#2DC6D6\") +\n  labs(\n    title = \"Revenue by State\",\n    x = \"State\",\n    y = \"Revenue\"\n  ) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x-axis labels\n\n\n\n\n\n\n\n\n\n#Challenge\nlibrary(tidyverse)\n\n#&gt; Warning: package 'tidyverse' was built under R version 4.3.3\n\n\n#&gt; Warning: package 'readr' was built under R version 4.3.3\n\n\n#&gt; Warning: package 'lubridate' was built under R version 4.3.3\n\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ forcats   1.0.0     ✔ readr     2.1.5\n#&gt; ✔ lubridate 1.9.3     ✔ tibble    3.2.1\n#&gt; ✔ purrr     1.0.2     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readxl)\nlibrary(lubridate)\n\nbikes_tbl &lt;- read_excel(\"C:/Users/Shweta/Documents/GitHub/ss24-bdsb-shwetaambade/datascience/ds_data/ds_data/01_bike_sales/01_raw_data/bikes.xlsx\")\nbikeshops_tbl &lt;- read_excel(\"C:/Users/Shweta/Documents/GitHub/ss24-bdsb-shwetaambade/datascience/ds_data/ds_data/01_bike_sales/01_raw_data/bikeshops.xlsx\")\norderlines_tbl &lt;- read_excel(\"C:/Users/Shweta/Documents/GitHub/ss24-bdsb-shwetaambade/datascience/ds_data/ds_data/01_bike_sales/01_raw_data/orderlines.xlsx\")\n\n#&gt; New names:\n#&gt; • `` -&gt; `...1`\n\n# 3.0 Examining Data ----\n\n# Method 1: Print it to the console\norderlines_tbl\n\n\n\n  \n\n\n# Method 2: glimpse\nglimpse(orderlines_tbl)\n\n#&gt; Rows: 15,644\n#&gt; Columns: 7\n#&gt; $ ...1        &lt;chr&gt; \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"…\n#&gt; $ order.id    &lt;dbl&gt; 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7…\n#&gt; $ order.line  &lt;dbl&gt; 1, 2, 1, 2, 1, 2, 3, 4, 5, 1, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2…\n#&gt; $ order.date  &lt;dttm&gt; 2015-01-07, 2015-01-07, 2015-01-10, 2015-01-10, 2015-01-1…\n#&gt; $ customer.id &lt;dbl&gt; 2, 2, 10, 10, 6, 6, 6, 6, 6, 22, 8, 8, 8, 8, 16, 16, 16, 1…\n#&gt; $ product.id  &lt;dbl&gt; 2681, 2411, 2629, 2137, 2367, 1973, 2422, 2655, 2247, 2408…\n#&gt; $ quantity    &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1…\n\n# 4.0 Joining Data ---\n\nleft_join(orderlines_tbl, bikes_tbl, by = c(\"product.id\" = \"bike.id\"))\n\n\n\n  \n\n\n# Chaining commands with the pipe and assigning it to order_items_joined_tbl\nbike_orderlines_joined_tbl &lt;- orderlines_tbl %&gt;%\n  left_join(bikes_tbl, by = c(\"product.id\" = \"bike.id\")) %&gt;%\n  left_join(bikeshops_tbl, by = c(\"customer.id\" = \"bikeshop.id\"))\n# Examine the results with glimpse()\nbike_orderlines_joined_tbl %&gt;% glimpse()\n\n#&gt; Rows: 15,644\n#&gt; Columns: 19\n#&gt; $ ...1           &lt;chr&gt; \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"…\n#&gt; $ order.id       &lt;dbl&gt; 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7…\n#&gt; $ order.line     &lt;dbl&gt; 1, 2, 1, 2, 1, 2, 3, 4, 5, 1, 1, 2, 3, 4, 1, 2, 3, 4, 1…\n#&gt; $ order.date     &lt;dttm&gt; 2015-01-07, 2015-01-07, 2015-01-10, 2015-01-10, 2015-0…\n#&gt; $ customer.id    &lt;dbl&gt; 2, 2, 10, 10, 6, 6, 6, 6, 6, 22, 8, 8, 8, 8, 16, 16, 16…\n#&gt; $ product.id     &lt;dbl&gt; 2681, 2411, 2629, 2137, 2367, 1973, 2422, 2655, 2247, 2…\n#&gt; $ quantity       &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1…\n#&gt; $ model          &lt;chr&gt; \"Spectral CF 7 WMN\", \"Ultimate CF SLX Disc 8.0 ETAP\", \"…\n#&gt; $ model.year     &lt;dbl&gt; 2021, 2020, 2021, 2019, 2020, 2020, 2020, 2021, 2020, 2…\n#&gt; $ frame.material &lt;chr&gt; \"carbon\", \"carbon\", \"carbon\", \"carbon\", \"aluminium\", \"c…\n#&gt; $ weight         &lt;dbl&gt; 13.80, 7.44, 14.06, 8.80, 11.50, 8.80, 8.20, 8.85, 14.4…\n#&gt; $ price          &lt;dbl&gt; 3119, 5359, 2729, 1749, 1219, 1359, 2529, 1559, 3899, 6…\n#&gt; $ category       &lt;chr&gt; \"Mountain - Trail - Spectral\", \"Road - Race - Ultimate\"…\n#&gt; $ gender         &lt;chr&gt; \"female\", \"unisex\", \"unisex\", \"unisex\", \"unisex\", \"unis…\n#&gt; $ url            &lt;chr&gt; \"https://www.canyon.com/en-de/mountain-bikes/trail-bike…\n#&gt; $ name           &lt;chr&gt; \"AlexandeRad\", \"AlexandeRad\", \"WITT-RAD\", \"WITT-RAD\", \"…\n#&gt; $ location       &lt;chr&gt; \"Hamburg, Hamburg\", \"Hamburg, Hamburg\", \"Bremen, Bremen…\n#&gt; $ lat            &lt;dbl&gt; 53.57532, 53.57532, 53.07379, 53.07379, 48.78234, 48.78…\n#&gt; $ lng            &lt;dbl&gt; 10.015340, 10.015340, 8.826754, 8.826754, 9.180819, 9.1…\n\n# 5.0 Wrangling Data ----\nbike_orderlines_wrangled_tbl &lt;- bike_orderlines_joined_tbl %&gt;%\n  \n  \n  separate(col    = location,\n           into   = c(\"city\", \"state\"),\n           sep    = \",\") %&gt;%\n  \n  \n  mutate(total.price = price * quantity) %&gt;%\n \n  select(-...1, -gender) %&gt;%\n \n  select(-ends_with(\".id\")) %&gt;%\n  \n \n  bind_cols(bike_orderlines_joined_tbl %&gt;% select(order.id)) %&gt;% \n  \n  \n  select(order.id, contains(\"order\"), contains(\"model\"), contains(\"category\"),\n         price, quantity, total.price,\n         everything()) %&gt;%\n  \n\n  rename(bikeshop = name) %&gt;%\n  set_names(names(.) %&gt;% str_replace_all(\"\\\\.\", \"_\"))\n# 6.1 Sales by Year ----\n\n# Step 1 - Manipulate\nsales_by_year_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  \n  # Select columns\n  select(order_date, total_price) %&gt;%\n  \n  # Add year column\n  mutate(year = year(order_date)) %&gt;%\n  \n  # Grouping by year and summarizing sales\n  group_by(year) %&gt;% \n  summarize(sales = sum(total_price)) %&gt;%\n  \n  \n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\nsales_by_year_tbl\n\n\n\n  \n\n\n# Step 2 - Visualization\nsales_by_year_tbl %&gt;%\n  \n  # Setup canvas with the columns year (x-axis) and sales (y-axis)\n  ggplot(aes(x = year, y = sales)) +\n  \n  # Geometries\n  geom_col(fill = \"springgreen2\") + \n  geom_label(aes(label = sales_text)) + \n  geom_smooth(method = \"lm\", se = FALSE) + \n  \n\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title    = \"Revenue by year\",\n    subtitle = \"Upward Trend\",\n    x = \"\", # Override defaults for x and y\n    y = \"Revenue\"\n  )\n\n#&gt; `geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n# 6.1 Sales by Year state ----\n# Step 1 - Manipulate\nsales_by_year_cat_1_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  \n  # Select columns and add a year\n  select(order_date, total_price, state) %&gt;%\n  mutate(year = year(order_date)) %&gt;%\n  \n\n  group_by(year, state) %&gt;%\n  summarise(sales = sum(total_price)) %&gt;%\n  ungroup() %&gt;%\n\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n#&gt; `summarise()` has grouped output by 'year'. You can override using the\n#&gt; `.groups` argument.\n\nsales_by_year_cat_1_tbl \n\n\n\n  \n\n\n# Step 2 - Visualize\nsales_by_year_cat_1_tbl %&gt;%\n  \n  # Set up x, y, fill\n  ggplot(aes(x = year, y = sales, fill = state)) +\n  \n# Geometries\ngeom_col() + \ngeom_smooth(method = \"lm\", se = FALSE) +\ntheme(axis.text.x = element_text(angle = 45, hjust = 1)) +\nfacet_wrap(~ state) +\nscale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                  decimal.mark = \",\", \n                                                  prefix = \"\", \n                                                  suffix = \" €\")) +\nlabs(\n  title = \"Revenue by Year and State\",\n  subtitle = \"Drop in sales are fairly low\",\n  fill = \"State\" # Changes the legend name\n) +\n  \n  theme_light() +\n  theme(title = element_text(face = \"bold\", color = \"brown4\"),\n        legend.position  = \"right\",\n        axis.text.x = element_text(angle = 45))\n\n#&gt; `geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "#API Challenge\n# Load packages\nlibrary(httr)\n\n#&gt; Warning: package 'httr' was built under R version 4.3.3\n\nlibrary(jsonlite)\n\n#&gt; Warning: package 'jsonlite' was built under R version 4.3.3\n\n# API key for OpenWeatherMap\napi_key &lt;- \"1b974d3ef182f3948d75d15456fbbd20\"\n\n# List of German cities\ngerman_cities &lt;- c(\"Berlin\", \"Hamburg\", \"Munich\", \"Cologne\", \"Frankfurt\", \"Stuttgart\", \"Düsseldorf\", \"Dortmund\", \"Essen\", \"Leipzig\")\n\n# Function to fetch weather data for a city\nfetch_weather &lt;- function(city) {\n  # API endpoint\n  url &lt;- paste0(\"https://api.openweathermap.org/data/2.5/weather?q=\", city, \"&appid=\", api_key)\n  \n  # Make GET request to API\n  response &lt;- GET(url)\n  \n  # Check if request was successful\n  if (http_type(response) == \"application/json\") {\n    # Parse JSON response\n    weather_data &lt;- content(response, \"text\", encoding = \"UTF-8\")\n    \n    # Convert JSON to list\n    weather_list &lt;- fromJSON(weather_data)\n    \n    # Extract relevant information\n    if (\"main\" %in% names(weather_list) && \"weather\" %in% names(weather_list)) {\n      temperature &lt;- weather_list$main$temp - 273.15  # Convert temperature from Kelvin to Celsius\n      humidity &lt;- weather_list$main$humidity\n      weather_description &lt;- weather_list$weather[1, \"description\"]\n      \n      # Create dataframe to store weather information\n      weather_df &lt;- data.frame(\n        \"City\" = city,\n        \"Temperature (°C)\" = temperature,\n        \"Humidity (%)\" = humidity,\n        \"Description\" = weather_description\n      )\n      \n      return(weather_df)\n    } else {\n      cat(\"Failed to extract relevant information from the response for\", city, \"\\n\")\n      return(NULL)\n    }\n  } else {\n    cat(\"Failed to fetch weather data for\", city, \"\\n\")\n    return(NULL)\n  }\n}\n\n# Fetch weather data for each city\nweather_data_list &lt;- lapply(german_cities, fetch_weather)\n\n# Combine weather data for all cities into a single dataframe\nweather_all &lt;- do.call(rbind, weather_data_list)\n\n# Print weather dataframe\nprint(weather_all)\n\n#&gt;          City Temperature...C. Humidity....      Description\n#&gt; 1      Berlin            20.89           63 scattered clouds\n#&gt; 2     Hamburg            20.75           59       few clouds\n#&gt; 3      Munich            19.93           57       few clouds\n#&gt; 4     Cologne            18.29           75    broken clouds\n#&gt; 5   Frankfurt            17.47           81       few clouds\n#&gt; 6   Stuttgart            17.93           67 scattered clouds\n#&gt; 7  Düsseldorf            18.44           76  overcast clouds\n#&gt; 8    Dortmund            19.04           70    broken clouds\n#&gt; 9       Essen            19.08           72    broken clouds\n#&gt; 10    Leipzig            19.63           66    broken clouds\n\n\n\n#Web Scraping\n#Load necessary libraries\n\nlibrary(tidyverse) \n\n#&gt; Warning: package 'tidyverse' was built under R version 4.3.3\n\n\n#&gt; Warning: package 'ggplot2' was built under R version 4.3.3\n\n\n#&gt; Warning: package 'tidyr' was built under R version 4.3.3\n\n\n#&gt; Warning: package 'readr' was built under R version 4.3.3\n\n\n#&gt; Warning: package 'dplyr' was built under R version 4.3.3\n\n\n#&gt; Warning: package 'lubridate' was built under R version 4.3.3\n\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#&gt; ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n#&gt; ✔ purrr     1.0.2     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter()  masks stats::filter()\n#&gt; ✖ purrr::flatten() masks jsonlite::flatten()\n#&gt; ✖ dplyr::lag()     masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(rvest)     \n\n#&gt; \n#&gt; Attaching package: 'rvest'\n#&gt; \n#&gt; The following object is masked from 'package:readr':\n#&gt; \n#&gt;     guess_encoding\n\nlibrary(xopen)     \n\n#&gt; Warning: package 'xopen' was built under R version 4.3.3\n\nlibrary(jsonlite)  \nlibrary(glue)      \nlibrary(stringi)   \n\nurl_home &lt;- \"https://www.rosebikes.de/fahrr%C3%A4der/mtb\"\n# Open links directly from RStudio to inspect them\n\nhtml_home &lt;- read_html(url_home) # Read in the HTML for the entire web page\n\n# data scraping from the web page for  the bike models \n# Scrape the bike model names\nbike_model &lt;- html_home %&gt;%\n  html_nodes(css = \".basic-headline.basic-headline--no-margin.basic-headline--small.basic-headline--left\")%&gt;%\n  html_text() %&gt;%\n  str_remove_all(\"\\n\")\nbike_model\n\n#&gt;  [1] \"PDQ            \"              \"COUNT SOLO            \"      \n#&gt;  [3] \"THRILL HILL            \"      \"GROUND CONTROL            \"  \n#&gt;  [5] \"ROOT MILLER            \"      \"BONERO            \"          \n#&gt;  [7] \"SCRUB            \"            \"THE BRUCE            \"       \n#&gt;  [9] \"ROOT MILLER PLUS            \" \"BONERO PLUS            \"\n\n# data scraping from the web page for  the bike prices\nbike_price &lt;- html_home %&gt;%\n  html_nodes(css = \".catalog-category-bikes__price-title\") %&gt;%\n  html_text() %&gt;%\n  \n  str_remove_all(\"\\\\.\") %&gt;%\n  stringr::str_replace_all(pattern = \"\\nab \", replacement = \"\") %&gt;%\n  stringr::str_replace_all(pattern = \"\\n\", replacement = \"\") \n  \nbike_price\n\n#&gt;  [1] \"                                                ab 2699,00 €                                            \"\n#&gt;  [2] \"                                                ab 499,00 €                                            \" \n#&gt;  [3] \"                                                ab 2299,00 €                                            \"\n#&gt;  [4] \"                                                ab 1499,00 €                                            \"\n#&gt;  [5] \"                                                ab 1799,00 €                                            \"\n#&gt;  [6] \"                                                ab 999,00 €                                            \" \n#&gt;  [7] \"                                                ab 3299,00 €                                            \"\n#&gt;  [8] \"                                                ab 799,00 €                                            \" \n#&gt;  [9] \"                                                ab 3999,00 €                                            \"\n#&gt; [10] \"                                                ab 4499,00 €                                            \"\n\n# merging the two tables into one\nda2 &lt;- tibble(bike_model, bike_price)\n\nda2 &lt;- da2 %&gt;%mutate(bike_price = as.character(gsub(\"€\", \"\", bike_price)))\nda2$bike_price &lt;- as.character(gsub(\",\",\"\",da2$bike_price))\nda2$bike_price &lt;- as.character(gsub(\"ab\",\"\",da2$bike_price))\n\n#d&lt;-da2\nda2\n\n\n\n  \n\n\nwrite_rds(da2, \"C:/Users/Shweta/Documents/GitHub/ss24-bdsb-shwetaambade/datascience/DataAcquistion2.R\")\nwrite.csv(x=da2, file=\"C:/Users/Shweta/Documents/GitHub/ss24-bdsb-shwetaambade/datascience/DataAcquistion2.csv\")"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "#challenge1 \nlibrary(readr)\n\n#&gt; Warning: package 'readr' was built under R version 4.3.3\n\nlibrary(tidyverse)\n\n#&gt; Warning: package 'tidyverse' was built under R version 4.3.3\n\n\n#&gt; Warning: package 'ggplot2' was built under R version 4.3.3\n\n\n#&gt; Warning: package 'tidyr' was built under R version 4.3.3\n\n\n#&gt; Warning: package 'dplyr' was built under R version 4.3.3\n\n\n#&gt; Warning: package 'lubridate' was built under R version 4.3.3\n\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.4     ✔ purrr     1.0.2\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#&gt; ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Read COVID-19 data\ncovid_data_tbl &lt;- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n\n#&gt; Rows: 399281 Columns: 67\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr   (4): iso_code, continent, location, tests_units\n#&gt; dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#&gt; date  (1): date\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Filter data for specified regions\nspecified_regions &lt;- c(\"Europe\", \"France\", \"Germany\", \"Spain\", \"United Kingdom\", \"United States\")\nfiltered_data &lt;- covid_data_tbl %&gt;%\n  filter(location %in% specified_regions & !is.na(total_cases))\n\n# Plot cumulative COVID-19 cases over time for each region\nfiltered_data %&gt;%\n  ggplot(aes(date, total_cases, color = location)) +\n  geom_line() +\n  scale_color_manual(values = c(Europe = \"#E41A1C\", France = \"#377EB8\", Germany = \"#4DAF4A\", \n                                Spain = \"#FF7F00\", `United Kingdom` = \"#984EA3\", `United States` = \"#FFFF33\")) +\n  labs(title = \"Cumulative COVID-19 Cases Over Time\",\n       x = \"Date\",\n       y = \"Total Cases\",\n       color = \"Region\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n# challenge2\n# Importing Libraries\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(ggthemes)\n\n#&gt; Warning: package 'ggthemes' was built under R version 4.3.3\n\nlibrary(maps)\n\n#&gt; Warning: package 'maps' was built under R version 4.3.3\n\n\n#&gt; \n#&gt; Attaching package: 'maps'\n\n\n#&gt; The following object is masked from 'package:purrr':\n#&gt; \n#&gt;     map\n\nlibrary(ggrepel)\n\n#&gt; Warning: package 'ggrepel' was built under R version 4.3.3\n\nlibrary(purrr)\n\n# Loading and preprocessing data\ncovid_data_tbl &lt;- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\") %&gt;%\n  mutate(mort_rate = total_deaths / population) %&gt;%\n  filter(!is.na(mort_rate)) %&gt;% # Filter out rows where mort_rate is NA\n  group_by(location) %&gt;%\n  summarise(Mortality_Rate = last(mort_rate, order_by = date)) %&gt;% # Ensure proper ordering by date\n  mutate(location = case_when(\n    location == \"United Kingdom\" ~ \"UK\",\n    location == \"United States\" ~ \"USA\",\n    location == \"Democratic Republic of Congo\" ~ \"Democratic Republic of the Congo\",\n    location == \"Cote d'Ivoire\" ~ \"Ivory Coast\",\n    location == \"Czechia\" ~ \"Czech Republic\",\n    location == \"Eswatini\" ~ \"Swaziland\",\n    location == \"Timor\" ~ \"East Timor\",\n    location == \"Congo\" ~ \"Republic of Congo\",\n    location == \"Burma\" ~ \"Myanmar\",\n    TRUE ~ location\n  )) %&gt;%\n  distinct()\n\n#&gt; Rows: 399281 Columns: 67\n\n\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr   (4): iso_code, continent, location, tests_units\n#&gt; dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#&gt; date  (1): date\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Loading world map data\nworld &lt;- map_data(\"world\")\n\n# Check for missing countries in the plot data\nmissing_countries &lt;- setdiff(unique(covid_data_tbl$location), unique(world$region))\nprint(missing_countries)\n\n#&gt;  [1] \"Africa\"                           \"Antigua and Barbuda\"             \n#&gt;  [3] \"Asia\"                             \"Bonaire Sint Eustatius and Saba\" \n#&gt;  [5] \"British Virgin Islands\"           \"Europe\"                          \n#&gt;  [7] \"European Union\"                   \"Faeroe Islands\"                  \n#&gt;  [9] \"Gibraltar\"                        \"High income\"                     \n#&gt; [11] \"Low income\"                       \"Lower middle income\"             \n#&gt; [13] \"Micronesia (country)\"             \"North America\"                   \n#&gt; [15] \"Oceania\"                          \"Saint Kitts and Nevis\"           \n#&gt; [17] \"Saint Martin (French part)\"       \"Saint Vincent and the Grenadines\"\n#&gt; [19] \"Sint Maarten (Dutch part)\"        \"South America\"                   \n#&gt; [21] \"East Timor\"                       \"Trinidad and Tobago\"             \n#&gt; [23] \"Tuvalu\"                           \"United States Virgin Islands\"    \n#&gt; [25] \"Upper middle income\"              \"World\"\n\n# Since the `maps` package does not have regions like \"Africa\", \"Asia\", \"Europe\", etc.,\n# these will not be plotted. For a more comprehensive visualization, consider using a more detailed map dataset.\n\n# Merging latitude/longitude data with COVID-19 mortality rate data\nplot_data &lt;- left_join(world, covid_data_tbl, by = c(\"region\" = \"location\"))\n\n# Creating world map plot using geom_map with red color gradient\nggplot(plot_data) +\n  geom_map(aes(map_id = region, fill = Mortality_Rate), map = world) +\n  expand_limits(x = world$long, y = world$lat) +\n  \n  # Plot labeling\n  scale_fill_continuous(labels = scales::percent_format(accuracy = 0.001), low = \"#FFCCCB\", high = \"#8B0000\") +\n  labs(\n    title = \"Mortality Rate (deaths / population) due to COVID-19\",\n    subtitle = \"Distribution across the world\",\n    fill = \"Mortality Rate\"\n  ) +\n  \n  theme(\n    axis.line = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title = element_blank(),\n    title = element_text(face = \"bold\", color = \"Black\"),\n    legend.position = \"right\",\n    plot.background = element_rect(fill = \"white\")\n  )"
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  }
]